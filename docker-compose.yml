services:

  # WebSocket communication (Redis)
  redis:
    image: redis:alpine  # Use the lightweight Alpine-based Redis image
    ports:
      - "6379:6379"  # Map the default Redis port to the host
    networks:
      - backend-network
    volumes:
      - redis_data:/data  # Persist Redis data to a volume
    command: redis-server --appendonly yes  # Enable data persistence for Redis
    restart: always  # Automatically restart on failure

  # Database service: PostgreSQL with TimescaleDB
  timescaledb:
    image: timescale/timescaledb:latest-pg16  # TimescaleDB image
    env_file:
      - ./backend/.env
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
#      POSTGRES_DB: smart_building
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./backend/sql:/docker-entrypoint-initdb.d/  # Mount SQL scripts
    networks:
      - backend-network
    ports:
    - "5432:5432"  # Map container port 5432 to host port 5432
    restart: always  # Automatically restart on failure

  # Real-time data consumer: Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - backend-network
    restart: always  # Automatically restart on failure

  # Real-time data consumer: Kafka
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - backend-network
    ports:
      - "9092:9092"
    restart: always  # Automatically restart on failure

  # Backend service: Django application
  django:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    env_file:
      - ./backend/.env
    depends_on:
      - redis
      - timescaledb
      - kafka
    ports:
      - "8000:8000"
    command: >
      sh -c "daphne -b 0.0.0.0 -p 8000 smart_building.asgi:application"
    volumes:
      - .:/app
    networks:
      - backend-network
    restart: always  # Automatically restart on failure

  # Frontend service: React.js application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    env_file:
      - ./frontend/.env
    volumes:
      - ./frontend:/app
    ports:
      - "3000:3000"
    networks:
      - backend-network
    restart: always  # Automatically restart on failure

  # Reverse proxy service: Nginx
  nginx:
    image: nginx:alpine
    ports:
      - "8080:8080"  # HTTP port for redirects (to HTTPS)
      - "443:443"    # HTTPS port
    depends_on:
      - django
      - frontend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro  # Mount nginx configuration
      - ./nginx/ssl/nginx.crt:/etc/ssl/certs/nginx.crt:ro  # Mount SSL certificate
      - ./nginx/ssl/nginx.key:/etc/ssl/private/nginx.key:ro  # Mount SSL key
    
    command: >
      sh -c "nginx -g 'daemon off;'"
             
    networks:
      - backend-network
    restart: always  # Automatically restart on failure

networks:
  # Shared bridge network for all services
  backend-network:
    driver: bridge

volumes:
  # Persistent storage for Redis and PostgreSQL
  db_data:
  redis_data:
